// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineStoreApp.Models;

#nullable disable

namespace OnlineStoreApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250928202503_AddSampleData")]
    partial class AddSampleData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("OnlineStoreApp.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Електронні пристрої",
                            Name = "Електроніка"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Чоловічий та жіночий одяг",
                            Name = "Одяг"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Книги різних жанрів",
                            Name = "Книги"
                        });
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Новітній смартфон Apple з титановим корпусом та системою камер Pro",
                            ImageUrl = "https://via.placeholder.com/300x200?text=iPhone+15+Pro",
                            IsAvailable = true,
                            Name = "iPhone 15 Pro",
                            Price = 35999m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Флагманський Android смартфон з AI функціями",
                            ImageUrl = "https://via.placeholder.com/300x200?text=Galaxy+S24",
                            IsAvailable = true,
                            Name = "Samsung Galaxy S24",
                            Price = 28999m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Ультрапортативний ноутбук Apple з чіпом M3",
                            ImageUrl = "https://via.placeholder.com/300x200?text=MacBook+Air",
                            IsAvailable = true,
                            Name = "MacBook Air M3",
                            Price = 45999m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            Description = "Класична бавовняна сорочка для офісу та повсякденного носіння",
                            ImageUrl = "https://via.placeholder.com/300x200?text=Сорочка",
                            IsAvailable = true,
                            Name = "Чоловіча сорочка",
                            Price = 1299m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Description = "Елегантне літнє плаття з натуральних тканин",
                            ImageUrl = "https://via.placeholder.com/300x200?text=Плаття",
                            IsAvailable = true,
                            Name = "Жіноче плаття",
                            Price = 2499m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            Description = "Повний посібник з програмування на мові C# для початківців",
                            ImageUrl = "https://via.placeholder.com/300x200?text=C%23+Book",
                            IsAvailable = true,
                            Name = "Програмування на C#",
                            Price = 899m
                        });
                });

            modelBuilder.Entity("OnlineStoreApp.Models.CartItem", b =>
                {
                    b.HasOne("OnlineStoreApp.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.OrderItem", b =>
                {
                    b.HasOne("OnlineStoreApp.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStoreApp.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Product", b =>
                {
                    b.HasOne("OnlineStoreApp.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineStoreApp.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
